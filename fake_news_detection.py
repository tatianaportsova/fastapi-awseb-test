# -*- coding: utf-8 -*-
"""Fake News Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Z1cy_epo7i1vL8365C7fbtYMRYsEQqq
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

fake_news_url = '/content/drive/My Drive/Fake & Real News Dataset/Fake.csv'
real_news_url = '/content/drive/My Drive/Fake & Real News Dataset/True.csv'
fake = pd.read_csv(fake_news_url)
real = pd.read_csv(real_news_url)

fake.shape, real.shape

fake.head()



real.head()

real['title'][1]

from sklearn.compose import make_column_transformer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline

target='y'
real[target]='real'
fake[target]='fake'

df = pd.concat([real, fake])

features = ['title']
X = df[features]
y = df[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify = y)

pipeline = make_pipeline(
    make_column_transformer((CountVectorizer(), 'title')),
    MultinomialNB()
)

val_scores = cross_val_score(pipeline, X_train, y_train)
val_score = val_scores.mean() * 100
print(f'Cross-validation Accuracy: {val_score:.1f}%')

pipeline.fit(X_train, y_train)
test_score = pipeline.score(X_test, y_test) * 100
print(f'Test Accuracy: {test_score:.1f}%')

def predict(title):
  df = pd.DataFrame.from_dict({'title':[title]})
  pred = pipeline.predict(df)
  return{'prediction':pred[0]}

predict('U.S. military to accept transgender recruits on Monday: Pentagon')

from joblib import dump
dump(pipeline,'pipeline.joblib', compress = True)

!ls -lh pipeline.joblib

import joblib
import pandas as pd
import sklearn
print(f'joblib=={joblib.__version__}')
print(f'pandas=={pd.__version__}')
print(f'scikit-learn=={sklearn.__version__}')

/content/pipeline.joblib